We can build a data structure that can be searched in O(1) time.
This concept is referred to as hashing.
A hash table is a collection of items which are stored in such a way as to make it easy to
find them later.
Each position of the hash table, slots, can hold an item and is named by an integer value starting
at 0.
For example, we will have a slot named 0, a slot named 2 and so on.
Initially the hash table contains no items so every slot is empty.
We can implement a hash table by using a list with each element initialized to the
special Python value None.
The mapping between an item and the slot where the item belongs in the has table is called
the hash function.
The hash function will take any item in the collection and return an integer in the range of
slot names, between 0 and m-1.

Hash Function - Remainder Method
One hash function we can use is the remainder method.
When presented with an item, the hash function is the item divided by the 
table size, this is then it's slot number.

Load factor(lambda) = (number of items)/Table size
collisions = elements that have the same "hash"


Hash functions :
A hash function that maps each item into a unique slot is referred to as a perfect
hash function.
Our goal is to create a hash function that minimizes the number of collisions, is easy to
compute, and evenly distributes the items in the hash table.

Hash functions - folding Method
The folding method for constructing hash functions begins by dividing the item into
equal-size pieces( the last piece may not be of equal size)
These pieces are then added together to give the resulting hash value.

Hash function - Mid Square Method

For the mid-square method we first square the item, and then extract some portion of the
resulting digits.
For example, if the item were 44, we would first compute 44^2=1,936
By extracting the middle two digits, 93 and performing the remainder step, we  get 93 % 11 = 5

Non-integer elements
We can also create hash functions for character based items such as strings
The word "cat" can be thought of as a sequence of ordinal values.

Collision Resolution
One method for resolving collisions looks into the hash table and tries to find another open slot
to hold the item that caused the collision.
We could start at the original hash value position and then move into a sequential manner through the slots
until we encounter the first slot that is empty.
This collision resolution process is referred to as open addressing in that it tries to find the next open slot
or address in the hash table.
By systematically visiting each slot one at a time, we are performing an open addressing technique called linear
probing.
The general name for this process of looking for another slot after a collision is rehashing.
A variation of the linear probing idea is called quadratic probing.
Instead of using a constant "skip" value, we use a rehash function that increments the hash value by 1,3,5,7,9 and so on.
An alternative method for handling the collision problem is to allow each slot to hold a reference to a collection(or chain)
of items.
Chaining allows many items to exist at the same location in the hash table.
When collisions happen, the item is still placed in the proper slot of the hash table.
As more and more items hash to the same location, the difficulty of searching for the item in the collection increases.
